vender: "AWS" # AWS | on-premise

environment: "develop" # develop | production

namespaceOverride: ""

gpuScheduler:
  enabled: false

replicaCount: 1

istioInject:
    enabled: false

hostname: ""

image:
  name: ""
  repository: ""
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

imagePullPolicy: Always

serviceAccount:
  create: true
  annotations: {}
  name: ""

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

serviceMonitor:
  # When set true then use a ServiceMonitor to configure scraping
  enabled: false
  # Set the namespace the ServiceMonitor should be deployed
  namespace: backend
  # Set how frequently Prometheus should scrape
  interval: 30s
  # Set path of metrics, e.g /api/v1/metrics/prometheus
  telemetryPath: /actuator/prometheus
  # Set labels for the ServiceMonitor, use this to define your scrape label for Prometheus Operator
  labels: 
    release: monitoring
  # Set timeout for scrape
  timeout: 10s
  # Set relabel_configs as per https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
  relabelings: []
  # Set of labels to transfer on the Kubernetes Service onto the target.
  targetLabels: []
  metricRelabelings: []

ingress:
  enabled: false
  annotations: {}
  labels: {}
  hosts: []
  paths: []
  tls: []
  pathType: ""
  servicePort: 80

service:
  type: ClusterIP
  port: 80
  targetPort: 8080

resources: {}

resourceQuota: {}

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

swagger:
  image:
    repository: swaggerapi/swagger-ui
    tag: v4.13.2
  imagePullSecrets: []
  imagePullPolicy: Always

  replicaCount: 1

  istioInject:
    enabled: true

  resources: {}
  tolerations: []

  ingress:
    enabled: false
    annotations: {}
    labels: {}
    hosts: []
    paths: []
    tls: []
    pathType: ""
    servicePort: 80

  service:
    port: 80
    targetPort: 8080

pullSecret:
  enabled: false
  dockerConfigJson: ""

preInstall:
  tolerations: []